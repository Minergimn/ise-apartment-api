// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/ise-apartment-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apartment "github.com/ozonmp/ise-apartment-api/internal/model"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateApartment mocks base method.
func (m *MockRepo) CreateApartment(arg0 context.Context, arg1 *apartment.Apartment) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApartment", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApartment indicates an expected call of CreateApartment.
func (mr *MockRepoMockRecorder) CreateApartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApartment", reflect.TypeOf((*MockRepo)(nil).CreateApartment), arg0, arg1)
}

// DeleteApartment mocks base method.
func (m *MockRepo) DeleteApartment(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApartment", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApartment indicates an expected call of DeleteApartment.
func (mr *MockRepoMockRecorder) DeleteApartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApartment", reflect.TypeOf((*MockRepo)(nil).DeleteApartment), arg0, arg1)
}

// GetApartment mocks base method.
func (m *MockRepo) GetApartment(arg0 context.Context, arg1 uint64) (*apartment.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApartment", arg0, arg1)
	ret0, _ := ret[0].(*apartment.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApartment indicates an expected call of GetApartment.
func (mr *MockRepoMockRecorder) GetApartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApartment", reflect.TypeOf((*MockRepo)(nil).GetApartment), arg0, arg1)
}

// ListApartments mocks base method.
func (m *MockRepo) ListApartments(arg0 context.Context, arg1, arg2 uint64, arg3, arg4 string, arg5 []uint64) ([]apartment.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApartments", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]apartment.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApartments indicates an expected call of ListApartments.
func (mr *MockRepoMockRecorder) ListApartments(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApartments", reflect.TypeOf((*MockRepo)(nil).ListApartments), arg0, arg1, arg2, arg3, arg4, arg5)
}
